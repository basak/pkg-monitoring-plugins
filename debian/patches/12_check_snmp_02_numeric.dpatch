#! /bin/sh /usr/share/dpatch/dpatch-run
## 12_check_snmp_02_numeric.dpatch by
## Thomas Guyot-Sionnest <dermoth@aei.ca>
##
## From c5b1568481420caaee4b898ebf0110e93e2d4be1 Mon Sep 17 00:00:00 2001
## From: Thomas Guyot-Sionnest <dermoth@aei.ca>
## Date: Tue, 30 Nov 2010 21:02:23 -0500
## Subject: [PATCH 2/4] check_snmp: Remove that is_numeric madness
## (Debian Bug #607736)
##
## Original patch to make Timeticks works as in check_snmp v1.4.14, it turns
## out is_numeric isn't so useful and treating all types as numeric works
## best for backwards-compatibility. This is how it used to work in 1.4.14.
##
## As a special case, I also make calculate_rate look up for numeric values
## as it would otherwise return the last value instead.
##
## DP: Remove that is_numeric madness

@DPATCH@

diff --git a/plugins/check_snmp.c b/plugins/check_snmp.c
index 9d91942..cb7fb7a 100644
--- a/plugins/check_snmp.c
+++ b/plugins/check_snmp.c
@@ -170,7 +170,6 @@ main (int argc, char **argv)
 	char *state_string=NULL;
 	size_t response_length, current_length, string_length;
 	char *temp_string=NULL;
-	int is_numeric=0;
 	time_t current_time;
 	double temp_double;
 	time_t duration;
@@ -336,29 +335,24 @@ main (int argc, char **argv)
 		/* We strip out the datatype indicator for PHBs */
 		if (strstr (response, "Gauge: ")) {
 			show = strstr (response, "Gauge: ") + 7;
-			is_numeric++;
 		} 
 		else if (strstr (response, "Gauge32: ")) {
 			show = strstr (response, "Gauge32: ") + 9;
-			is_numeric++;
 		} 
 		else if (strstr (response, "Counter32: ")) {
 			show = strstr (response, "Counter32: ") + 11;
-			is_numeric++;
 			is_counter=1;
 			if(!calculate_rate) 
 				strcpy(type, "c");
 		}
 		else if (strstr (response, "Counter64: ")) {
 			show = strstr (response, "Counter64: ") + 11;
-			is_numeric++;
 			is_counter=1;
 			if(!calculate_rate)
 				strcpy(type, "c");
 		}
 		else if (strstr (response, "INTEGER: ")) {
 			show = strstr (response, "INTEGER: ") + 9;
-			is_numeric++;
 		}
 		else if (strstr (response, "STRING: ")) {
 			show = strstr (response, "STRING: ") + 8;
@@ -410,15 +404,17 @@ main (int argc, char **argv)
 			}
 
 		}
-		else if (strstr (response, "Timeticks: "))
+		else if (strstr (response, "Timeticks: ")) {
 			show = strstr (response, "Timeticks: ");
+		}
 		else
 			show = response;
 
 		iresult = STATE_DEPENDENT;
 
 		/* Process this block for numeric comparisons */
-		 if (is_numeric) {
+		/* Make some special values,like Timeticks numeric only if a threshold is defined */
+		if (thlds[i]->warning || thlds[i]->critical || calculate_rate) {
 			ptr = strpbrk (show, "0123456789");
 			if (ptr == NULL)
 				die (STATE_UNKNOWN,_("No valid data returned"));
diff --git a/plugins/t/check_snmp.t b/plugins/t/check_snmp.t
index 004ba1a..25a2999 100644
--- a/plugins/t/check_snmp.t
+++ b/plugins/t/check_snmp.t
@@ -8,7 +8,7 @@ use strict;
 use Test::More;
 use NPTest;
 
-my $tests = 8+38+2+2;
+my $tests = 8+42+2+2;
 plan tests => $tests;
 my $res;
 
@@ -124,6 +124,13 @@ SKIP: {
 		cmp_ok( $res->return_code, '==', 0, "Skipping all thresholds");
 		like($res->output, '/^SNMP OK - \d+ \w+ \d+\s.*$/', "Skipping all thresholds, result printed rather than parsed");
 
+		$res = NPTest->testCmd( "./check_snmp -H $host_snmp -C $snmp_community -o system.sysUpTime.0 -c 1000000000: -u '1/100 sec'");
+		cmp_ok( $res->return_code, '==', 2, "Timetick used as a threshold");
+		like($res->output, '/^SNMP CRITICAL - \*\d+\* 1\/100 sec.*$/', "Timetick used as a threshold, parsed as numeric");
+
+		$res = NPTest->testCmd( "./check_snmp -H $host_snmp -C $snmp_community -o system.sysUpTime.0");
+		cmp_ok( $res->return_code, '==', 0, "Timetick used as a string");
+		like($res->output, '/^SNMP OK - Timeticks:\s\(\d+\)\s+(?:\d+ days?,\s+)?\d+:\d+:\d+\.\d+\s.*$/', "Timetick used as a string, result printed rather than parsed");
 	}
 
 	# These checks need a complete command line. An invalid community is used so
-- 
1.7.3.2

