#! /bin/sh /usr/share/dpatch/dpatch-run
## 50_misc_typos.dpatch by  <andy@andrewprice.me.uk>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: This patch fixes various typos and grammatical errors in plugins/*.c.
## DP: It is based on Malcolm Parsons' patch posted at https://launchpad.net/bugs/64595

@DPATCH@
diff -urNad nagios-plugins-1.4.8~/plugins/check_dns.c nagios-plugins-1.4.8/plugins/check_dns.c
--- nagios-plugins-1.4.8~/plugins/check_dns.c	2007-01-28 21:46:40.000000000 +0000
+++ nagios-plugins-1.4.8/plugins/check_dns.c	2007-06-17 17:00:18.000000000 +0100
@@ -218,7 +218,7 @@
     printf (_("DNS CRITICAL - %s\n"),
             !strcmp (msg, "") ? _(" Probably a non-existent host/domain") : msg);
   else
-    printf (_("DNS UNKNOW - %s\n"),
+    printf (_("DNS UNKNOWN - %s\n"),
             !strcmp (msg, "") ? _(" Probably a non-existent host/domain") : msg);
 
   return result;
diff -urNad nagios-plugins-1.4.8~/plugins/check_http.c nagios-plugins-1.4.8/plugins/check_http.c
--- nagios-plugins-1.4.8~/plugins/check_http.c	2007-03-06 22:45:57.000000000 +0000
+++ nagios-plugins-1.4.8/plugins/check_http.c	2007-06-17 17:28:18.000000000 +0100
@@ -1084,7 +1084,7 @@
   
   url = malloc (strcspn (pos, "\r\n"));
   if (url == NULL)
-    die (STATE_UNKNOWN, _("Could not allocate url\n"));
+    die (STATE_UNKNOWN, _("Could not allocate URL\n"));
 
   while (pos) {
     sscanf (pos, "%[Ll]%*[Oo]%*[Cc]%*[Aa]%*[Tt]%*[Ii]%*[Oo]%*[Nn]:%n", xx, &i);
@@ -1103,7 +1103,7 @@
 
     url = realloc (url, strcspn (pos, "\r\n"));
     if (url == NULL)
-      die (STATE_UNKNOWN, _("could not allocate url\n"));
+      die (STATE_UNKNOWN, _("could not allocate URL\n"));
 
     /* URI_HTTP, URI_HOST, URI_PORT, URI_PATH */
     if (sscanf (pos, HD1, type, addr, port, url) == 4) {
@@ -1259,7 +1259,7 @@
   printf ("   %s\n", _("Connect via SSL. Port defaults to 443"));
   printf (" %s\n", "-C, --certificate=INTEGER");
   printf ("   %s\n", _("Minimum number of days a certificate has to be valid. Port defaults to 443"));
-  printf ("   %s\n", _("(when this option is used the url is not checked.)\n"));
+  printf ("   %s\n", _("(when this option is used the URL is not checked.)\n"));
 #endif
 
   printf (" %s\n", "-e, --expect=STRING");
diff -urNad nagios-plugins-1.4.8~/plugins/check_ldap.c nagios-plugins-1.4.8/plugins/check_ldap.c
--- nagios-plugins-1.4.8~/plugins/check_ldap.c	2007-01-28 21:46:40.000000000 +0000
+++ nagios-plugins-1.4.8/plugins/check_ldap.c	2007-06-17 17:03:03.000000000 +0100
@@ -184,7 +184,7 @@
 	if (ldap_bind_s (ld, ld_binddn, ld_passwd, LDAP_AUTH_SIMPLE) !=
 			LDAP_SUCCESS) {
 		/*ldap_perror(ld, "ldap_bind"); */
-		printf (_("Could not bind to the ldap-server\n"));
+		printf (_("Could not bind to the LDAP server\n"));
 		return STATE_CRITICAL;
 	}
 
diff -urNad nagios-plugins-1.4.8~/plugins/check_mysql.c nagios-plugins-1.4.8/plugins/check_mysql.c
--- nagios-plugins-1.4.8~/plugins/check_mysql.c	2007-03-29 18:58:28.000000000 +0100
+++ nagios-plugins-1.4.8/plugins/check_mysql.c	2007-06-17 17:09:27.000000000 +0100
@@ -370,7 +370,7 @@
 
 	printf (_(COPYRIGHT), copyright, email);
 
-	printf ("%s\n", _("This program tests connections to a mysql server"));
+	printf ("%s\n", _("This program tests connections to a MySQL server"));
 
   printf ("\n\n");
   
diff -urNad nagios-plugins-1.4.8~/plugins/check_procs.c nagios-plugins-1.4.8/plugins/check_procs.c
--- nagios-plugins-1.4.8~/plugins/check_procs.c	2007-03-06 17:29:15.000000000 +0000
+++ nagios-plugins-1.4.8/plugins/check_procs.c	2007-06-17 17:16:34.000000000 +0100
@@ -690,7 +690,7 @@
   printf ("  %s\n", _("PROCS   - number of processes (default)"));
   printf ("  %s\n", _("VSZ     - virtual memory size"));
   printf ("  %s\n", _("RSS     - resident set memory size"));
-  printf ("  %s\n", _("CPU     - percentage cpu"));
+  printf ("  %s\n", _("CPU     - percentage CPU"));
 /* only linux etime is support currently */
 #if defined( __linux__ )
 	printf ("  %s\n", _("ELAPSED - time elapsed in seconds"));
@@ -708,11 +708,11 @@
   printf (" %s\n", "-p, --ppid=PPID");
   printf ("   %s\n", _("Only scan for children of the parent process ID indicated."));
   printf (" %s\n", "-z, --vsz=VSZ");
-  printf ("   %s\n", _("Only scan for processes with vsz higher than indicated."));
+  printf ("   %s\n", _("Only scan for processes with VSZ higher than indicated."));
   printf (" %s\n", "-r, --rss=RSS");
-  printf ("   %s\n", _("Only scan for processes with rss higher than indicated."));
+  printf ("   %s\n", _("Only scan for processes with RSS higher than indicated."));
 	printf (" %s\n", "-P, --pcpu=PCPU");
-  printf ("   %s\n", _("Only scan for processes with pcpu higher than indicated."));
+  printf ("   %s\n", _("Only scan for processes with PCPU higher than indicated."));
   printf (" %s\n", "-u, --user=USER");
   printf ("   %s\n", _("Only scan for processes with user name or ID indicated."));
   printf (" %s\n", "-a, --argument-array=STRING");
@@ -740,9 +740,9 @@
   printf ("  %s\n", _("Warning alert if > 10 processes with command arguments containing"));
   printf ("  %s\n\n", _("'/usr/local/bin/perl' and owned by root"));
   printf (" %s\n", "check_procs -w 50000 -c 100000 --metric=VSZ");
-  printf ("  %s\n\n", _("Alert if vsz of any processes over 50K or 100K"));
+  printf ("  %s\n\n", _("Alert if VSZ of any processes over 50K or 100K"));
   printf (" %s\n", "check_procs -w 10 -c 20 --metric=CPU");
-  printf ("  %s\n\n", _("Alert if cpu of any processes over 10%% or 20%%"));
+  printf ("  %s\n\n", _("Alert if CPU of any processes over 10%% or 20%%"));
 
 	printf (_(UT_SUPPORT));
 }
diff -urNad nagios-plugins-1.4.8~/plugins/check_radius.c nagios-plugins-1.4.8/plugins/check_radius.c
--- nagios-plugins-1.4.8~/plugins/check_radius.c	2007-01-28 21:46:40.000000000 +0000
+++ nagios-plugins-1.4.8/plugins/check_radius.c	2007-06-17 17:18:58.000000000 +0100
@@ -302,7 +302,7 @@
 	printf ("Copyright (c) 1999 Robert August Vincent II\n");
 	printf (COPYRIGHT, copyright, email);
 
-	printf("%s\n", _("Tests to see if a radius server is accepting connections."));
+	printf("%s\n", _("Tests to see if a RADIUS server is accepting connections."));
 
   printf ("\n\n");
 
@@ -327,16 +327,16 @@
 
 	printf (_(UT_TIMEOUT), timeout_interval);
 
-	printf ("%s\n", _("This plugin tests a radius server to see if it is accepting connections."));
+	printf ("%s\n", _("This plugin tests a RADIUS server to see if it is accepting connections."));
   printf ("%s\n", _("The server to test must be specified in the invocation, as well as a user"));
   printf ("%s\n", _("name and password. A configuration file may also be present. The format of"));
   printf ("%s\n", _("the configuration file is described in the radiusclient library sources."));
 	printf ("%s\n", _("The password option presents a substantial security issue because the"));
   printf ("%s\n", _("password can be determined by careful watching of the command line in"));
   printf ("%s\n", _("a process listing.  This risk is exacerbated because nagios will"));
-  printf ("%s\n", _("run the plugin at regular prdictable intervals.  Please be sure that"));
+  printf ("%s\n", _("run the plugin at regular predictable intervals.  Please be sure that"));
   printf ("%s\n", _("the password used does not allow access to sensitive system resources,"));
-  printf ("%s\n", _("otherwise compormise could occur."));
+  printf ("%s\n", _("otherwise compromise could occur."));
 
 	printf (_(UT_SUPPORT));
 }
diff -urNad nagios-plugins-1.4.8~/plugins/check_snmp.c nagios-plugins-1.4.8/plugins/check_snmp.c
--- nagios-plugins-1.4.8~/plugins/check_snmp.c	2007-02-02 09:10:22.000000000 +0000
+++ nagios-plugins-1.4.8/plugins/check_snmp.c	2007-06-17 17:21:46.000000000 +0100
@@ -906,7 +906,7 @@
 
 	printf (COPYRIGHT, copyright, email);
 
-	printf ("%s\n", _("Check status of remote machines and obtain sustem information via SNMP"));
+	printf ("%s\n", _("Check status of remote machines and obtain system information via SNMP"));
 
   printf ("\n\n");
 
@@ -941,8 +941,8 @@
 	printf (" %s\n", "-o, --oid=OID(s)");
   printf ("    %s\n", _("Object identifier(s) or SNMP variables whose value you wish to query"));
   printf (" %s\n", "-m, --miblist=STRING");
-  printf ("    %s\n", _("List of MIBS to be loaded (default = none if using numeric oids or 'ALL'"));
-  printf ("    %s\n", _("for symbolic oids.)"));
+  printf ("    %s\n", _("List of MIBS to be loaded (default = none if using numeric OIDs or 'ALL'"));
+  printf ("    %s\n", _("for symbolic OIDs.)"));
   printf (" %s\n", "-d, --delimiter=STRING");
   printf (_("    Delimiter to use when parsing returned data. Default is \"%s\""), DEFAULT_DELIMITER);
   printf ("    %s\n", _("Any data on the right hand side of the delimiter is considered"));
diff -urNad nagios-plugins-1.4.8~/plugins/check_tcp.c nagios-plugins-1.4.8/plugins/check_tcp.c
--- nagios-plugins-1.4.8~/plugins/check_tcp.c	2007-02-14 10:11:06.000000000 +0000
+++ nagios-plugins-1.4.8/plugins/check_tcp.c	2007-06-17 17:22:10.000000000 +0100
@@ -623,7 +623,7 @@
   printf (" %s\n", "-q, --quit=STRING");
   printf ("    %s\n", _("String to send server to initiate a clean close of the connection"));
 	printf (" %s\n", "-r, --refuse=ok|warn|crit");
-  printf ("    %s\n", _("Accept tcp refusals with states ok, warn, crit (default: crit)"));
+  printf ("    %s\n", _("Accept TCP refusals with states ok, warn, crit (default: crit)"));
   printf (" %s\n", "-M, --mismatch=ok|warn|crit");
   printf ("    %s\n", _("Accept expected string mismatches with states ok, warn, crit (default: warn)"));
   printf (" %s\n", "-j, --jail");
diff -urNad nagios-plugins-1.4.8~/plugins/check_ups.c nagios-plugins-1.4.8/plugins/check_ups.c
--- nagios-plugins-1.4.8~/plugins/check_ups.c	2007-01-28 21:46:41.000000000 +0000
+++ nagios-plugins-1.4.8/plugins/check_ups.c	2007-06-17 17:26:33.000000000 +0100
@@ -416,7 +416,7 @@
 	len = strlen(ptr);
 	if (len > 0 && ptr[len-1] == '\n') ptr[len-1]=0;
 	if (strcmp (ptr, "ERR UNKNOWN-UPS") == 0) {
-		printf (_("CRITICAL - no such ups '%s' on that host\n"), ups_name);
+		printf (_("CRITICAL - no such UPS '%s' on that host\n"), ups_name);
 		return ERROR;
 	}
 
@@ -583,7 +583,7 @@
 validate_arguments (void)
 {
 	if (! ups_name) {
-		printf ("%s\n", _("Error : no ups indicated"));
+		printf ("%s\n", _("Error : no UPS indicated"));
 		return ERROR;
 	}
 	return OK;
@@ -631,7 +631,7 @@
 	printf ("%s\n", _("This plugin attempts to determine the status of a UPS (Uninterruptible Power"));
   printf ("%s\n", _("Supply) on a local or remote host. If the UPS is online or calibrating, the"));
   printf ("%s\n", _("plugin will return an OK state. If the battery is on it will return a WARNING"));
-  printf ("%s\n", _("state.If the UPS is off or has a low battery the plugin will return a CRITICAL"));
+  printf ("%s\n", _("state. If the UPS is off or has a low battery the plugin will return a CRITICAL"));
   printf ("%s\n\n", _("state."));
 
 	printf ("%s\n", _("You may also specify a variable to check [such as temperature, utility voltage,"));
@@ -639,7 +639,7 @@
   printf ("%s\n", _("that variable.  If the remote host has multiple UPS that are being monitored you"));
   printf ("%s\n", _("will have to use the [ups] option to specify which UPS to check."));
 
-	printf ("%s\n", _("This plugin requires that the UPSD daemon distributed with Russel Kroll's"));
+	printf ("%s\n", _("This plugin requires that the UPSD daemon distributed with Russell Kroll's"));
   printf ("%s\n", _("Smart UPS Tools be installed on the remote host.  If you do not have the"));
   printf ("%s\n", _("package installed on your system, you can download it from http://www.networkupstools.org"));
 
